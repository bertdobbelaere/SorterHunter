# Sample config file for SorterHunter program
# Note: keys are case sensitive.

# Number of inputs to the sorting network (no default)
Ninputs=16

# Assume symmetric network (=1) or not (=0)
# Symmetric networks allow faster searches and give with few exceptions the best results for even values of Ninputs.
Symmetric=0

# Random seed. Set to value different from 0 to create reproducible results or omit for "practically undeterministic" random to improve chances over multiple runs
#RandomSeed=124

# Inverse probability of pair addition per iteration ("uphill step"). Default: no additions.
EscapeRate=250

# Forcing the uphill step (see EscapeRate) not to break a valid sorter. When set to >0, an inserted pair that would affect the sorting result will be changed into a duplicate of the next pair.
# This gives empirically slightly better results than earlier version that didn't support this option. Default is 1.
#ForceValidUphillStep = 1

# Maximum number of mutations per iteration. Default 1.
MaxMutations = 2

# Relative probabilities of mutation types (integer >=0). Not all must be 0. Don't use huge values (total<10000 is no issue), as a table is allocated for the probability distribution 
WeigthRemovePair = 1              # Remove a random pair
WeigthSwapPairs  = 1              # Swap two random pairs
WeigthReplacePair = 0             # Replace random pair with another pair
WeightCrossPairs = 1              # Cross two pairs at random positions
WeightSwapIntersectingPairs = 1   # Swap pairs in neighbouring layers sharing a connection
WeightReplaceHalfPair = 1         # Replace one of the two connections of a random pair

# Prefix type
# 0 = None (default)
# 1 = Fixed - Prefix pairs from FixedPrefix value will be used
# 2 = GreedyA - Greedy algorithm A: per pair minimisation of remaining pattern set size, randomized every restart when ex aequo.
# 3 = Hybrid prefix, first fixed part, then GreedyA part
PrefixType = 0

# Size of greedy prefix
# Only relevant if PrefixType = 2 or 3
#GreedyPrefixSize = 13

# Specify fixed prefix as comma separated list of pairs. Inputs are 0 based.
# Only relevant if PrefixType = 1 or 3
#net36
#FixedPrefix=(0,1),(2,3),(4,5),(6,7),(8,9),(10,11),(12,13),(14,15),(16,17),(18,19),(20,21),(22,23),(24,25),(26,27),(28,29),(30,31),(32,33),(34,35),(0,34),(1,35),(2,4),(3,5),(6,8),(7,9),(10,12),(11,13),(14,16),(15,17),(18,20),(19,21),(22,24),(23,25),(26,28),(27,29),(30,32),(31,33),(1,34),(2,6),(3,7),(4,8),(5,9),(10,14),(11,15),(12,16),(13,17),(18,22),(19,23),(20,24),(21,25),(26,30),(27,31),(28,32),(29,33),(2,10),(3,11),(4,12),(5,13),(6,14),(7,15),(8,16),(9,17),(18,26),(19,27),(20,28),(21,29),(22,30),(23,31),(24,32),(25,33),(2,18),(3,19),(4,20),(5,21),(6,22),(7,23),(8,24),(9,25),(10,26),(11,27),(12,28),(13,29),(14,30),(15,31),(16,32),(17,33),(0,2),(1,4),(5,7),(6,10),(8,26),(9,27),(11,19),(12,22),(13,23),(14,20),(15,21),(16,24),(25,29),(28,30),(31,34),(33,35),(1,18),(2,26),(4,30),(5,31),(7,22),(9,33),(11,20),(12,14),(13,28),(15,24),(17,34),(21,23),(1,6),(2,3),(4,9),(10,18),(13,15),(17,25),(20,22),(26,31),(29,34),(32,33),(1,2),(3,5),(4,8),(9,16),(14,18),(17,21),(19,26),(27,31),(30,32),(33,34),(2,10),(3,12),(4,11),(5,18),(7,19),(8,20),(9,13),(15,27),(16,28),(17,30),(22,26),(23,32),(24,31),(25,33),(3,6),(5,7),(8,9),(11,12),(13,16),(15,18),(17,20),(19,22),(23,24),(26,27),(28,30),(29,32),(2,3),(4,6),(5,10),(7,14),(8,11),(9,12),(13,18),(15,19),(16,20),(17,22),(21,28),(23,26),(24,27),(25,30),(29,31),(32,33),(4,5),(6,10),(7,8),(9,14),(11,15),(12,19),(13,17),(16,23),(18,22),(20,24),(21,26),(25,29),(27,28),(30,31),(3,4),(5,7),(8,11),(9,10),(12,15),(13,14),(16,17),(18,19),(20,23),(21,22),(24,27),(25,26),(28,30),(31,32),(4,5),(6,7),(8,9),(10,11),(12,13),(14,15),(16,18),(17,19),(20,21),(22,23),(24,25),(26,27),(28,29),(30,31),(5,6),(7,8),(9,10),(11,12),(13,14),(15,16),(17,18),(19,20),(21,22),(23,24),(25,26),(27,28),(29,30)

#result     (0,2),(1,3),(0,1),(2,3),(1,2),(4,5),(0,4),(2,4),(3,5),(1,3),(3,4),(1,2)]}

#Net16_8x8: first 8 are sorted, next 8 are also sorted
#FixedPrefix=(0,2),(1,3),(4,6),(5,7),(0,4),(1,5),(2,6),(3,7),(0,1),(2,3),(4,5),(6,7),(2,4),(3,5),(1,4),(3,6),(1,2),(3,4),(5,6),(8,10),(9,11),(12,14),(13,15),(8,12),(9,13),(10,14),(11,15),(8,9),(10,11),(12,13),(14,15),(10,12),(11,13),(9,12),(11,14),(9,10),(11,12),(13,14)
#result     (0,2),(1,3),(4,6),(5,7),(0,4),(1,5),(2,6),(3,7),(0,1),(2,3),(4,5),(6,7),(2,4),(3,5),(1,4),(3,6),(1,2),(3,4),(5,6),(8,10),(9,11),(12,14),(13,15),(8,12),(9,13),(10,14),(11,15),(8,9),(10,11),(12,13),(14,15),(10,12),(11,13),(9,12),(11,14),(9,10),(11,12),(13,14)

#Net32_16x16: first 16 nodes are sorted, next 16 nodes are also sorted:
#FixedPrefix=(0,5),(1,4),(2,12),(3,13),(6,7),(8,9),(10,15),(11,14),(0,2),(1,10),(3,6),(4,7),(5,14),(8,11),(9,12),(13,15),(0,8),(1,3),(2,11),(4,13),(5,9),(6,10),(7,15),(12,14),(0,1),(2,4),(3,8),(5,6),(7,12),(9,10),(11,13),(14,15),(1,3),(2,5),(4,8),(6,9),(7,11),(10,13),(12,14),(1,2),(3,5),(4,11),(6,8),(7,9),(10,12),(13,14),(2,3),(4,5),(6,7),(8,9),(10,11),(12,13),(4,6),(5,7),(8,10),(9,11),(3,4),(5,6),(7,8),(9,10),(11,12),(16,21),(17,20),(18,28),(19,29),(22,23),(24,25),(26,31),(27,30),(16,18),(17,26),(19,22),(20,23),(21,30),(24,27),(25,28),(29,31),(16,24),(17,19),(18,27),(20,29),(21,25),(22,26),(23,31),(28,30),(16,17),(18,20),(19,24),(21,22),(23,28),(25,26),(27,29),(30,31),(17,19),(18,21),(20,24),(22,25),(23,27),(26,29),(28,30),(17,18),(19,21),(20,27),(22,24),(23,25),(26,28),(29,30),(18,19),(20,21),(22,23),(24,25),(26,27),(28,29),(20,22),(21,23),(24,26),(25,27),(19,20),(21,22),(23,24),(25,26),(27,28)
#result     (0,5),(1,4),(2,12),(3,13),(6,7),(8,9),(10,15),(11,14),(0,2),(1,10),(3,6),(4,7),(5,14),(8,11),(9,12),(13,15),(0,8),(1,3),(2,11),(4,13),(5,9),(6,10),(7,15),(12,14),(0,1),(2,4),(3,8),(5,6),(7,12),(9,10),(11,13),(14,15),(1,3),(2,5),(4,8),(6,9),(7,11),(10,13),(12,14),(1,2),(3,5),(4,11),(6,8),(7,9),(10,12),(13,14),(2,3),(4,5),(6,7),(8,9),(10,11),(12,13),(4,6),(5,7),(8,10),(9,11),(3,4),(5,6),(7,8),(9,10),(11,12),(16,21),(17,20),(18,28),(19,29),(22,23),(24,25),(26,31),(27,30),(16,18),(17,26),(19,22),(20,23),(21,30),(24,27),(25,28),(29,31),(16,24),(17,19),(18,27),(20,29),(21,25),(22,26),(23,31),(28,30),(16,17),(18,20),(19,24),(21,22),(23,28),(25,26),(27,29),(30,31),(17,19),(18,21),(20,24),(22,25),(23,27),(26,29),(28,30),(17,18),(19,21),(20,27),(22,24),(23,25),(26,28),(29,30),(18,19),(20,21),(22,23),(24,25),(26,27),(28,29),(20,22),(21,23),(24,26),(25,27),(19,20),(21,22),(23,24),(25,26),(27,28),(1,17),(12,28),(0,16),(8,24),(14,30),(11,27),(13,29),(3,19),(7,23),(10,26),(2,18),(10,18),(15,31),(11,19),(8,16),(5,21),(13,21),(15,29),(9,25),(9,17),(13,17),(6,22),(4,20),(4,8),(15,23),(12,20),(14,22),(15,19),(7,11),(21,25),(5,9),(3,5),(20,24),(23,27),(6,10),(7,9),(6,8),(7,8),(11,13),(22,26),(12,16),(10,12),(14,18),(2,4),(14,16),(18,20),(19,21),(19,20),(23,25),(15,17),(26,28),(25,26),(1,2),(3,4),(9,10),(22,24),(11,12),(21,22),(17,18),(13,14),(15,16),(29,30),(27,28),(23,24),(5,6)

#Net6_4x2: first 4 nodes are sorted, next 2 nodes are also sorted:
FixedPrefix=(0,2),(1,3),(0,1),(2,3),(1,2),(4,5)


# Postfix network to finish the sorter. One application is to search for median detecting networks.
# e.g. to find a network just outputing the median of Ninputs=7 inputs, define postfix (0,1),(1,2),(0,1),(4,5),(5,6),(4,5), then find a sorter and just strip the postfix afterwards.
#Postfix=(4,5),(14,15)

# Specify initial network (after prefix, if applicable) as comma separated list of pairs. Inputs are 0 based.
# Pairs containing input indices >= Ninputs will be silently removed (allows reduction of larger known good networks)
# Note that if Symmetric=1 the pairs in InitialNetwork will be subject to mirroring and duplication.
# This feature can be used to try to improve an existing network. Default: empty.
#InitialNetwork=(4,17),(6,19),(15,22),(1,8),(14,16),(7,9),(7,14),(9,16),(0,2),(21,23),(10,11),(12,13),(1,15),(8,22),(13,17),(6,10),(11,19),(4,12),(9,15),(8,14),(14,15),(8,9),(3,18),(5,20),(20,23),(0,3),(1,7),(16,22),(2,18),(5,21),(2,13),(10,21),(11,20),(3,12),(12,21),(2,11),(17,18),(5,6),(3,6),(17,20),(0,4),(19,23),(18,23),(0,5),(1,5),(18,22),(14,20),(3,9),(15,21),(2,8),(0,1),(22,23),(9,11),(12,14),(3,5),(18,20),(6,7),(16,17),(13,19),(4,10),(8,10),(13,15),(17,19),(4,6),(8,9),(14,15),(12,16),(7,11),(1,3),(20,22),(10,18),(5,13),(11,17),(6,12),(2,4),(19,21),(7,13),(10,16),(6,8),(15,17),(9,12),(11,14),(19,20),(3,4),(21,22),(1,2),(2,3),(20,21),(7,10),(13,16),(14,16),(7,9),(18,19),(4,5),(15,18),(5,8),(17,19),(4,6),(19,20),(3,4),(11,13),(10,12),(12,15),(8,11),(5,7),(16,18),(13,14),(9,10),(14,15),(8,9),(10,11),(12,13),(13,14),(9,10),(16,17),(6,7),(11,12),(7,8),(15,16),(5,6),(17,18)

# Inverse probablity per iteration to start over. This is one of the strategies to escape a local minimum. Default: no restart
#RestartRate=1000000000

# Modify overall verbosity level: 
# 0:minimal
# 1:moderate (default)
# 2:high
# >2:debug
#Verbosity=3

